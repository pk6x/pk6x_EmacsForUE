diff --git a/Engine/Source/Programs/UnrealBuildTool/Modes/GenerateProjectFilesMode.cs b/Engine/Source/Programs/UnrealBuildTool/Modes/GenerateProjectFilesMode.cs
index a42da4931c5..07764de7053 100644
--- a/Engine/Source/Programs/UnrealBuildTool/Modes/GenerateProjectFilesMode.cs
+++ b/Engine/Source/Programs/UnrealBuildTool/Modes/GenerateProjectFilesMode.cs
@@ -38,6 +38,7 @@ namespace UnrealBuildTool
 		[CommandLine("-VSMac", Value = nameof(ProjectFileFormat.VisualStudioMac))]
 		[CommandLine("-CLion", Value = nameof(ProjectFileFormat.CLion))]
 		[CommandLine("-Rider", Value = nameof(ProjectFileFormat.Rider))]
+		[CommandLine("-UnrealEmacs", Value = nameof(ProjectFileFormat.UnrealEmacs))]
 		HashSet<ProjectFileFormat> ProjectFileFormats = new HashSet<ProjectFileFormat>();
 
 		/// <summary>
@@ -193,6 +194,9 @@ namespace UnrealBuildTool
 					case ProjectFileFormat.Rider:
 						Generator = new RiderProjectFileGenerator(ProjectFile, Arguments);
 						break;
+					case ProjectFileFormat.UnrealEmacs:
+						Generator = new UnrealEmacsProjectFileGenerator(ProjectFile, Arguments);
+						break;
 					default:
 						throw new BuildException("Unhandled project file type '{0}", ProjectFileFormat);
 				}
diff --git a/Engine/Source/Programs/UnrealBuildTool/ProjectFiles/Emacs/UnrealEmacsProjectFile.cs b/Engine/Source/Programs/UnrealBuildTool/ProjectFiles/Emacs/UnrealEmacsProjectFile.cs
new file mode 100644
index 00000000000..83daf77772f
--- /dev/null
+++ b/Engine/Source/Programs/UnrealBuildTool/ProjectFiles/Emacs/UnrealEmacsProjectFile.cs
@@ -0,0 +1,36 @@
+using System.Collections.Generic;
+using Tools.DotNETCommon;
+
+namespace UnrealBuildTool
+{
+	/// <summary>
+	/// Unreal Emacs project files.
+	/// </summary>
+	internal class UnrealEmacsProjectFile : ProjectFile
+	{
+		/// <summary>
+		/// Creates a new instance of the Unreal Emacs project generator.
+		/// </summary>
+		/// <param name="InProjectFilePath">
+		/// The path to the project file, relative to the master project file.
+		/// </param>
+		public UnrealEmacsProjectFile(FileReference InProjectFilePath) : base(InProjectFilePath)
+		{
+		}
+
+		/// <summary>
+		/// Writes a project file to disk.
+		/// </summary>
+		/// <param name="InPlatforms">The platforms to write the project files for.</param>
+		/// <param name="InConfigurations">The configurations to add to the project files.</param>
+		/// <param name="PlatformProjectGenerators">The registered platform project generators.</param>
+		/// <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
+		public override bool WriteProjectFile(List<UnrealTargetPlatform> InPlatforms,
+			List<UnrealTargetConfiguration> InConfigurations,
+			PlatformProjectGeneratorCollection PlatformProjectGenerators)
+		{
+			// We do nothing at the moment, however there are plans to extend this.
+			return true;
+		}
+	}
+}
\ No newline at end of file
diff --git a/Engine/Source/Programs/UnrealBuildTool/ProjectFiles/Emacs/UnrealEmacsProjectFileGenerator.cs b/Engine/Source/Programs/UnrealBuildTool/ProjectFiles/Emacs/UnrealEmacsProjectFileGenerator.cs
new file mode 100644
index 00000000000..cd3a3a6db2b
--- /dev/null
+++ b/Engine/Source/Programs/UnrealBuildTool/ProjectFiles/Emacs/UnrealEmacsProjectFileGenerator.cs
@@ -0,0 +1,235 @@
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using Tools.DotNETCommon;
+
+namespace UnrealBuildTool
+{
+	internal class UnrealEmacsProjectFileGenerator : ProjectFileGenerator
+	{
+		#region Fields and properties
+
+		/// <summary>
+		/// File extension for project files we'll be generating.
+		///
+		/// In case of Unreal Emacs, a project 'file' is a directory, which name is '.uemacs'.
+		/// </summary>
+		public override string ProjectFileExtension
+		{
+			get { return ".uemacs"; }
+		}
+
+		/// <summary>
+		/// Absolute path to the Unreal Emacs project directory.
+		/// </summary>
+		private DirectoryReference EmacsProjectDirectory;
+
+		/// <summary>
+		/// Absolute path to the Unreal Engine root directory.
+		/// </summary>
+		private DirectoryReference EngineRootDirectory;
+
+		/// <summary>
+		/// A map of a source file to its compilation command.
+		/// </summary>
+		private readonly Dictionary<FileReference, string> FileToCompileCommand =
+			new Dictionary<FileReference, string>();
+
+		#endregion
+
+		#region Construction
+
+		/// <summary>
+		/// Creates a new instance of the Unreal Emacs project generator.
+		/// </summary>
+		/// <param name="InOnlyGameProject">The project file passed in on the command line.</param>
+		/// <param name="InArguments">T
+		/// he command line arguments used to customize default behavior of the generator.
+		/// </param>
+		public UnrealEmacsProjectFileGenerator(FileReference InOnlyGameProject,
+			CommandLineArguments InArguments) : base(InOnlyGameProject)
+		{
+			// Ignoring command-line arguments at the moment.
+		}
+
+		#endregion
+
+		#region Overrides
+
+		/// <summary>
+		/// Clean project files.
+		/// </summary>
+		/// <param name="InMasterProjectDirectory">The master project directory.</param>
+		/// <param name="InMasterProjectName">The name of the master project.</param>
+		/// <param name="InIntermediateProjectFilesDirectory">The intermediate path of project files.</param>
+		public override void CleanProjectFiles(DirectoryReference InMasterProjectDirectory,
+			string InMasterProjectName,
+			DirectoryReference InIntermediateProjectFilesDirectory)
+		{
+		}
+
+		/// <summary>
+		/// Allocates a generator-specific master project folder object.
+		/// </summary>
+		/// <param name="OwnerProjectFileGenerator">Project file generator that owns this object.</param>
+		/// <param name="FolderName">Name for this folder.</param>
+		/// <returns>The newly allocated project folder object.</returns>
+		public override MasterProjectFolder AllocateMasterProjectFolder(
+			ProjectFileGenerator OwnerProjectFileGenerator, string FolderName)
+		{
+			return new UnrealEmacsProjectFolder(OwnerProjectFileGenerator, FolderName);
+		}
+
+
+		/// <summary>
+		/// Allocates a generator-specific project file object.
+		/// </summary>
+		/// <param name="InitFilePath">Path to the project file.</param>
+		/// <returns>The newly allocated project file object.</returns>
+		protected override ProjectFile AllocateProjectFile(FileReference InitFilePath)
+		{
+			return new UnrealEmacsProjectFile(InitFilePath);
+		}
+
+		/// <summary>
+		/// Writes the master project file.
+		/// </summary>
+		/// <param name="UBTProject">The UnrealBuildTool project.</param>
+		/// <param name="PlatformProjectGenerators">The platform project file generators.</param>
+		/// <returns><c>true</c> if operation was successful, <c>false</c> otherwise.</returns>
+		protected override bool WriteMasterProjectFile(ProjectFile UBTProject,
+			PlatformProjectGeneratorCollection PlatformProjectGenerators)
+		{
+			EngineRootDirectory   = UnrealBuildTool.RootDirectory;
+			EmacsProjectDirectory = DirectoryReference.Combine(MasterProjectPath, ProjectFileExtension);
+
+			// The directory is unused for now but in the future it will contain project specific data
+			// so that Emacs code can use it.
+			DirectoryReference.CreateDirectory(EmacsProjectDirectory);
+
+			FileReference CompilationDatabasePath =
+				FileReference.Combine(MasterProjectPath, "compile_commands.json");
+			using (JsonWriter Writer = new JsonWriter(CompilationDatabasePath, JsonWriterStyle.Compact))
+			{
+				Writer.WriteArrayStart();
+				foreach (KeyValuePair<FileReference, string> FileCommandPair in FileToCompileCommand
+					.OrderBy(x => x.Key.FullName))
+				{
+					Writer.WriteObjectStart();
+					Writer.WriteValue("file", FileCommandPair.Key.FullName);
+					Writer.WriteValue("command", FileCommandPair.Value);
+					Writer.WriteValue("directory", EngineRootDirectory.FullName);
+					Writer.WriteObjectEnd();
+				}
+
+				Writer.WriteArrayEnd();
+			}
+
+			return true;
+		}
+
+		protected override void AddTargetForIntellisense(UEBuildTarget Target)
+		{
+			base.AddTargetForIntellisense(Target);
+
+			if (Target.ProjectFile != OnlyGameProject)
+			{
+				return;
+			}
+
+			FileReference ClangCompilerPath = FindClangCompiler(Target);
+			CppCompileEnvironment GlobalCompileEnvironment =
+				Target.CreateCompileEnvironmentForProjectFiles();
+
+			foreach (UEBuildBinary Binary in Target.Binaries)
+			{
+				CppCompileEnvironment BinaryCompileEnvironment =
+					Binary.CreateBinaryCompileEnvironment(GlobalCompileEnvironment);
+				foreach (UEBuildModuleCPP Module in Binary.Modules.OfType<UEBuildModuleCPP>())
+				{
+					CppCompileEnvironment ModuleCompileEnvironment =
+						Module.CreateModuleCompileEnvironment(Target.Rules,
+							BinaryCompileEnvironment);
+
+					StringBuilder CompileCommand =
+						new StringBuilder($"\"{ClangCompilerPath.FullName}\" ");
+					foreach (FileItem File in ModuleCompileEnvironment.ForceIncludeFiles)
+					{
+						CompileCommand.AppendFormat(" -include \"{0}\"", File.FullName);
+					}
+
+					foreach (string Definition in ModuleCompileEnvironment.Definitions)
+					{
+						CompileCommand.AppendFormat(" -D\"{0}\"", Definition);
+					}
+
+					foreach (DirectoryReference Path in ModuleCompileEnvironment.UserIncludePaths)
+					{
+						CompileCommand.AppendFormat(" -I\"{0}\"", Path);
+					}
+
+					foreach (DirectoryReference Path in ModuleCompileEnvironment.SystemIncludePaths)
+					{
+						CompileCommand.AppendFormat(" -I\"{0}\"", Path);
+					}
+
+					Dictionary<DirectoryItem, FileItem[]> DirectoryToSourceFile =
+						new Dictionary<DirectoryItem, FileItem[]>();
+					UEBuildModuleCPP.InputFileCollection InputFiles = Module.FindInputFiles(
+						Target.Platform, DirectoryToSourceFile);
+
+					List<FileItem> SourceFiles = new List<FileItem>();
+					SourceFiles.AddRange(InputFiles.CPPFiles);
+					SourceFiles.AddRange(InputFiles.CCFiles);
+
+					foreach (FileItem File in SourceFiles)
+					{
+						FileToCompileCommand[File.Location] =
+							$"{CompileCommand} \"{File.FullName}\"";
+					}
+				}
+			}
+		}
+
+		#endregion
+
+		#region Utilities
+
+		/// <summary>
+		/// Searches for the Clang compiler for the given platform.
+		/// </summary>
+		/// <param name="Target">The build platform to use to search for the Clang compiler.</param>
+		/// <returns>The path to the Clang compiler.</returns>
+		private static FileReference FindClangCompiler(UEBuildTarget Target)
+		{
+			// TODO: Check the case when Clang is not available.
+			UnrealTargetPlatform HostPlatform = BuildHostPlatform.Current.Platform;
+
+			if (HostPlatform == UnrealTargetPlatform.Win64)
+			{
+				VCEnvironment Environment = VCEnvironment.Create(WindowsCompiler.Clang, Target.Platform,
+					Target.Rules.WindowsPlatform.Architecture, null,
+					Target.Rules.WindowsPlatform.WindowsSdkVersion, null);
+
+				return FileReference.FromString(Environment.CompilerPath.FullName);
+			}
+			else if (HostPlatform == UnrealTargetPlatform.Linux)
+			{
+				return FileReference.FromString(LinuxCommon.WhichClang());
+			}
+			else if (HostPlatform == UnrealTargetPlatform.Mac)
+			{
+				MacToolChainSettings Settings = new MacToolChainSettings(false);
+				DirectoryReference ToolchainDir = DirectoryReference.FromString(Settings.ToolchainDir);
+
+				return FileReference.Combine(ToolchainDir, "clang++");
+			}
+			else
+			{
+				return FileReference.FromString("clang++");
+			}
+		}
+
+		#endregion
+	}
+}
\ No newline at end of file
diff --git a/Engine/Source/Programs/UnrealBuildTool/ProjectFiles/Emacs/UnrealEmacsProjectFolder.cs b/Engine/Source/Programs/UnrealBuildTool/ProjectFiles/Emacs/UnrealEmacsProjectFolder.cs
new file mode 100644
index 00000000000..392943d7ca9
--- /dev/null
+++ b/Engine/Source/Programs/UnrealBuildTool/ProjectFiles/Emacs/UnrealEmacsProjectFolder.cs
@@ -0,0 +1,18 @@
+namespace UnrealBuildTool
+{
+	/// <summary>
+	/// Represents a folder within the master project.
+	/// </summary>
+	internal class UnrealEmacsProjectFolder : MasterProjectFolder
+	{
+		/// <summary>
+		/// Creates a new instance of the Unreal Emacs project folder object.
+		/// </summary>
+		/// <param name="InitOwnerProjectFileGenerator">Project file generator that owns this object.</param>
+		/// <param name="InitFolderName">Name for this folder.</param>
+		public UnrealEmacsProjectFolder(ProjectFileGenerator InitOwnerProjectFileGenerator, string InitFolderName) :
+			base(InitOwnerProjectFileGenerator, InitFolderName)
+		{
+		}
+	}
+}
\ No newline at end of file
diff --git a/Engine/Source/Programs/UnrealBuildTool/ProjectFiles/ProjectFileGenerator.cs b/Engine/Source/Programs/UnrealBuildTool/ProjectFiles/ProjectFileGenerator.cs
index f4cfb004aa6..d4188e3d406 100644
--- a/Engine/Source/Programs/UnrealBuildTool/ProjectFiles/ProjectFileGenerator.cs
+++ b/Engine/Source/Programs/UnrealBuildTool/ProjectFiles/ProjectFileGenerator.cs
@@ -140,7 +140,8 @@ namespace UnrealBuildTool
 		VisualStudioCode,
 		VisualStudioMac,
 		CLion,
-		Rider
+		Rider,
+		UnrealEmacs
 	}
 
 	/// <summary>
@@ -636,6 +637,10 @@ namespace UnrealBuildTool
 				{
 					Format = ProjectFileFormat.VisualStudio2022;
 					return true;
+				} else if (PreferredAccessor == "unrealemacs")
+				{
+					Format = ProjectFileFormat.UnrealEmacs;
+					return true;
 				}
 			}
 
diff --git a/Engine/Source/Programs/UnrealBuildTool/System/BuildHostPlatform.cs b/Engine/Source/Programs/UnrealBuildTool/System/BuildHostPlatform.cs
index aec2d642e2b..b2c47d47e7e 100644
--- a/Engine/Source/Programs/UnrealBuildTool/System/BuildHostPlatform.cs
+++ b/Engine/Source/Programs/UnrealBuildTool/System/BuildHostPlatform.cs
@@ -260,6 +260,7 @@ namespace UnrealBuildTool
 		internal override IEnumerable<ProjectFileFormat> GetDefaultProjectFileFormats()
 		{
 			yield return ProjectFileFormat.VisualStudio;
+			yield return ProjectFileFormat.UnrealEmacs;
 		}
 	}
 
@@ -383,6 +384,7 @@ namespace UnrealBuildTool
 		internal override IEnumerable<ProjectFileFormat> GetDefaultProjectFileFormats()
 		{
 			yield return ProjectFileFormat.XCode;
+			yield return ProjectFileFormat.UnrealEmacs;
 		}
 	}
 
@@ -435,6 +437,7 @@ namespace UnrealBuildTool
 			yield return ProjectFileFormat.QMake;
 			yield return ProjectFileFormat.CMake;
 			yield return ProjectFileFormat.CodeLite;
+			yield return ProjectFileFormat.UnrealEmacs;
 		}
 	}
 }
diff --git a/Engine/Source/Programs/UnrealBuildTool/UnrealBuildTool.csproj b/Engine/Source/Programs/UnrealBuildTool/UnrealBuildTool.csproj
index 2736ef225e2..ebc7964b579 100644
--- a/Engine/Source/Programs/UnrealBuildTool/UnrealBuildTool.csproj
+++ b/Engine/Source/Programs/UnrealBuildTool/UnrealBuildTool.csproj
@@ -179,6 +179,9 @@
     <Compile Include="ProjectFiles\CodeLite\CodeLiteProject.cs" />
     <Compile Include="ProjectFiles\Eddie\EddieGenerator.cs" />
     <Compile Include="ProjectFiles\Eddie\EddieProject.cs" />
+    <Compile Include="ProjectFiles\Emacs\UnrealEmacsProjectFile.cs" />
+    <Compile Include="ProjectFiles\Emacs\UnrealEmacsProjectFileGenerator.cs" />
+    <Compile Include="ProjectFiles\Emacs\UnrealEmacsProjectFolder.cs" />
     <Compile Include="ProjectFiles\KDevelop\KDevelopGenerator.cs" />
     <Compile Include="ProjectFiles\Make\MakefileGenerator.cs" />
     <Compile Include="ProjectFiles\PlatformProjectGenerator.cs" />
